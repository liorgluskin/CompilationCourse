package IC.Parser;

import java.util.List;
import java.util.ArrayList;
import IC.DataTypes;
import IC.AST.*;
import java_cup.runtime.*;
import IC.TypeTable.SemanticError;

parser code {:

	// override method call in case of a (unrecovered) syntax error
	public void unrecovered_syntax_error(Symbol current_token) throws SyntaxError{
		throw new SyntaxError(current_token.left, (String)current_token.value);
	}
	
	// override method call in case of a syntax error, to avoid duplicate error messages
	public void syntax_error(Symbol current_token){}
	
:};

// Terminals:
terminal MULTIPLY, DIVIDE, PLUS, MINUS, MOD;
terminal LP, RP, LB, RB, LCBR, RCBR;
terminal SEMI, COMMA, DOT;
terminal EQUAL, ASSIGN, GTE, GT, LTE, LT, NEQUAL;
terminal LAND, LOR, LNEG;
terminal BREAK, CONTINUE, EXTENDS, WHILE, IF, ELSE, TRUE, FALSE, LENGTH, NEW, NULL, RETURN, STATIC, THIS;
terminal VOID, BOOLEAN, INT, CLASS, STRING;
terminal String CLASS_ID;
terminal String ID;
terminal Integer INTEGER;
terminal String QUOTE; 
terminal UMINUS;

// Non-Terminals:
non terminal ICClass libic;
non terminal LibraryMethod libmethod;
non terminal List<Method> libmethod_list; 
non terminal Formal formal;
non terminal List<Formal> formal_list;
non terminal Type type;

// Precedences:
precedence left LP, RP, LB, RB;

// Derivation rules:
libic ::= CLASS CLASS_ID:lib LCBR libmethod_list:lmlst RCBR
	{: if (lib.compareTo("Library") != 0) throw new SemanticError("Library class must be named 'Library'",libleft,lib); // throw semantic error if library name not "Library"
	   RESULT = new ICClass(libleft, lib, new ArrayList<Field>(), lmlst);
	   // System.out.println("Reduced rule class Library {lmlst} for lmlst=" + lmlst);
	:}
;

libmethod_list ::= libmethod:lm
	{: List<Method> l = new ArrayList<Method>();
	   l.add(lm);
	   RESULT = l;
	   // System.out.println("Created new list of LibraryMethod, added lm=" + lm); :}
	| libmethod_list:lmlst libmethod:lm
	{: lmlst.add(lm);
	   RESULT = lmlst;
	   // System.out.println("Added lm to list of LibraryMethod for lm=" + lm); :}
;

libmethod ::= STATIC VOID ID:id LP RP SEMI
	{: RESULT = new LibraryMethod(new PrimitiveType(idleft, DataTypes.VOID), id, new ArrayList<Formal>());
	   // System.out.println("Reduced rule static void id(); for id=" + id); :}
	| STATIC type:t ID:id LP RP SEMI
	{: RESULT = new LibraryMethod(t, id, new ArrayList<Formal>());
	   // System.out.println("Reduced rule static t id(); for t=" + t + " and id=" + id); :}
	| STATIC VOID ID:id LP formal_list:f RP SEMI
	{: RESULT = new LibraryMethod(new PrimitiveType(idleft, DataTypes.VOID), id, f);
	   // System.out.println("Reduced rule static void id(f); for id=" + id + " and f=" + f); :}
	| STATIC type:t ID:id LP formal_list:f RP SEMI
	{: RESULT = new LibraryMethod(t, id, f);
	   // System.out.println("Reduced rule static t id(f); for t=" + t + ", id=" + id + " and f=" + f); :}
;

formal_list ::= formal:f
	{: List<Formal> l = new ArrayList<Formal>();
	   l.add(f);
	   RESULT = l;
	   // System.out.println("Created new list of Formal, added f=" + f); :}
	| formal_list:fl COMMA formal:f
	{: fl.add(f);
	   RESULT = fl;
	   // System.out.println("Added f to list of Formal for f=" + f); :}
;

formal ::= type:t ID:id
	{: RESULT = new Formal(t, id);
	   // System.out.println("Reduced rule t id for t=" + t + " and id=" + id); :}
;

type ::= INT:i {: RESULT = new PrimitiveType(ileft, DataTypes.INT); :}
	| BOOLEAN:b {: RESULT = new PrimitiveType(bleft, DataTypes.BOOLEAN); :}
	| STRING:s {: RESULT = new PrimitiveType(sleft, DataTypes.STRING); :}
	| CLASS_ID:ci {: RESULT = new UserType(cileft, ci); :}
	| type:t LB RB {: t.incrementDimension(); RESULT = t; :}
;
