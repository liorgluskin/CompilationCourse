package slp;

import java.util.List;

public class StaticMethod extends Method {

		/** Accepts a visitor object as part of the visitor pattern.
		 * @param visitor A visitor.
		 */
		@Override
		public void accept(Visitor visitor) {
			visitor.visit(this);
		}
	
		/** Accepts a propagating visitor parameterized by two types.
		 * 
		 * @param <DownType> The type of the object holding the context.
		 * @param <UpType> The type of the result object.
		 * @param visitor A propagating visitor.
		 * @param context An object holding context information.
		 * @return The result of visiting this node.
		 */
		@Override
		public <DownType, UpType> UpType accept(
				PropagatingVisitor<DownType, UpType> visitor, DownType context) {
			return visitor.visit(this, context);
		}

	/**
	 * Constructs a new static method node.
	 * 
	 * @param type
	 *            Data type returned by method.
	 * @param name
	 *            Name of method.
	 * @param formals
	 *            List of method parameters.
	 * @param statements
	 *            List of method's statements.
	 */
	public StaticMethod(Type type, String name, List<Formal> formals,
			List<Statement> statements) {
		super(type, name, formals, statements);
		this.is_static = true;
	}

}
