package types;

import java.util.Iterator;
import java.util.List;


public class TypeMethod extends Type {	

	private List<Type> parametersTypes;
	private Type returnType;
	
	
	public TypeMethod( Type returnType, List<Type> parametersTypes){
		super(null);
		this.returnType = returnType;
		this.parametersTypes = parametersTypes;
	}
	
	public boolean subtypeOf(Type t){
		if (t == this) return true;
		else return false;
	}
	

	public Type getReturnType(){
		return this.returnType;
	}
	

	public List<Type> getParamTypes(){
		return this.parametersTypes;
	}
	
	public boolean equals(TypeMethod methodType){
		if (this.getName() != methodType.getName()) return false;
		else if (this.returnType != methodType.getReturnType()) return false;
		else{
			Iterator<Type> paramIterator = this.parametersTypes.iterator();
			Iterator<Type> otherIter = methodType.parametersTypes.iterator();
			
			while (paramIterator.hasNext() && otherIter.hasNext()){
				if (paramIterator.next() != otherIter.next()) return false; 
			}
			if (paramIterator.hasNext() || otherIter.hasNext()) return false;
			else return true;
		}
	}
	
	public String toString(){
		String str = "{ name: "+ this.getName();

		Iterator<Type> paramIter = parametersTypes.iterator();
		if (paramIter.hasNext()){
			str += paramIter.next().getName(); // put first parameter if exists
		}
		while (paramIter.hasNext()){
			str += ", "+paramIter.next().getName(); // put others if exist
		}
		
		str += " -> "+this.returnType.getName()+"}";
		
		return str;
	}
}
