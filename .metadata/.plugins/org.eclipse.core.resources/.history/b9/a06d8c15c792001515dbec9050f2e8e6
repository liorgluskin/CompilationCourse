package slp;

import java_cup.runtime.*;



/**********************/
/* TERMINALS (TOKENS) */
/**********************/
terminal ASSIGN;
terminal BOOLEAN;
terminal BREAK;
terminal CLASS;
terminal COMMA;
terminal CONTINUE;
terminal DIVIDE;
terminal DOT;
terminal EQUAL;
terminal EXTENDS;
terminal ELSE;
terminal FALSE;
terminal GT;
terminal GTE;
terminal IF;
terminal INT;
terminal LAND;
terminal MULTIPLY;
terminal LP;

//Lior
terminal LB;
terminal LCBR;
terminal LENGTH;
terminal NEW;
terminal LNEG;
terminal LOR;
terminal LT;
terminal LTE;
terminal MINUS;
terminal MOD;
terminal NEQUAL;

//Tomer
terminal NULL;
terminal PLUS;
terminal RB;
terminal RCBR;
terminal RETURN;
terminal RP;
terminal SEMI;
terminal STATIC;
terminal STRING;
terminal THIS;
terminal TRUE;
terminal VOID;
terminal WHILE;
 
/**********************/
/* TERMINALS (TOKENS) */
/**********************/
terminal Integer	NUMBER;
terminal String		ID;
terminal String		CLASS_ID;
terminal String		QUOTE;

/**********************/
/* 	 NON TERMINALS 	  */
/**********************/
non terminal Program program;
non terminal List<ClassDecl> class_decl_list;
non terminal ClassDecl class_decl;
non terminal ClassContent class_content;
non terminal List<Field> fields;
non terminal Method method;
non terminal List<String> id_list;
non terminal Formal formal;
non terminal List<Formal> formals;
non terminal Type type;


non terminal Expr expr;
non terminal List<Expr> expr_list;
non terminal Location location;
non terminal Call call;
non terminal StaticCall static_call;
non terminal VirtualCall virtual_call;
non terminal BinaryOpExpr binop;
non terminal UnaryOpExpr unop;
non terminal Literal literal;


/**********************/
/* 	   PRECEDENCE 	  */
/**********************/
precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL,NEQUAL;
precedence left LT,LTE,GT,GTE;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right LNEG;
precedence left DOT, RP, LP, LB, RB;

/**********************/
/* 	DERIVATION RULES  */
/**********************/

program ::= class_decl_list:cdlst
	{: RESULT = new Program(cdlst); :}
;

class_decl_list ::=  
	{: RESULT = new ArrayList<ClassDecl>(); :};
	| class_decl_list:cdlst class_decl:cd
	{: cdlst.add(cd);
	   RESULT = cdlst;
	:}
;

classDecl ::= CLASS CLASS_ID:cid LCBR RCBR
	{: RESULT = new ClassDecl(cid, new ArrayList<Field>(), new ArrayList<Method>()); :}
	| CLASS CLASS_ID:cid LCBR class_content:content RCBR
	{: RESULT = new ClassDecl(cid, content.getFieldList(), content.getMethodList()); :}
	| CLASS CLASS_ID:cid EXTENDS CLASS_ID:scid LCBR RCBR
	{: RESULT = new ClassDecl(cid, scid, new ArrayList<Field>(), new ArrayList<Method>()); :}
	| CLASS CLASS_ID:cid EXTENDS CLASS_ID:scid LCBR class_content:content RCBR
	{: RESULT = new ClassDecl(cid, scid, content.getFieldList(), content.getMethodList()); :}
;

class_content ::= fields:fs
	{: RESULT = new ClassContent(fs); :}
	| method:m
	{: RESULT = new ClassContent(m); :}
	| class_conent:content fields:fs
	{: content.addField(fs);
	   RESULT = content; 
	:}
	| class_content:content method:m
	{: content.addMethod(m);
	   RESULT = content;
	:}
;

fields ::= type:t id_list:idlst SEMI
	{: List<Field> field_list = new ArrayList<Field>();
	   for (String id: idlst){
	      field_list.add(new Field(t, id));
	   }
	   RESULT = field_list; 
	:}
;

id_list ::= ID:id
	{: List<String> idlst = new ArrayList<String>();
	   idlst.add(id);
	   RESULT = idlst; 
	:}
	| id_list:idlst COMMA ID:id
	{: idlst.add(id);
	   RESULT = idlst; 
	:}
;

method ::= STATIC VOID ID:id LP RP LCBR stmt_list:sl RCBR 
	{: RESULT = new StaticMethod(new PrimitiveType(DataTypes.VOID), id, new ArrayList<Formal>(), sl); :}
	| STATIC type:t ID:id LP RP LCBR stmt_list:sl RCBR
	{: RESULT = new StaticMethod(t, id, new ArrayList<Formal>(), sl); :}
	| STATIC VOID ID:id LP formal_list:f RP LCBR stmt_list:sl RCBR
	{: RESULT = new StaticMethod(new PrimitiveType(DataTypes.VOID), id, f, sl); :}
	| STATIC type:t ID:id LP formal_list:f RP LCBR stmt_list:sl RCBR
	{: RESULT = new StaticMethod(t, id, f, sl); :}
	| VOID ID:id LP RP LCBR stmt_list:sl RCBR 
	{: RESULT = new ClassMethod(new PrimitiveType(DataTypes.VOID), id, new ArrayList<Formal>(), sl);:}
	| type:t ID:id LP RP LCBR stmt_list:sl RCBR
	{: RESULT = new ClassMethod(t, id, new ArrayList<Formal>(), sl); :}
	| VOID ID:id LP formal_list:f RP LCBR stmt_list:sl RCBR
	{: RESULT = new ClassMethod(new PrimitiveType(DataTypes.VOID), id, f, sl); :}
	| type:t ID:id LP formal_list:f RP LCBR stmt_list:sl RCBR
	{: RESULT = new ClassMethod(t, id, f, sl); :}

formals ::= formal:f
	{: List<Formal> flst = new ArrayList<Formal>();
	   flst.add(f);
	   RESULT = flst;
	:}
	| formals:fs COMMA formal:f
	{: fs.add(f);
	   RESULT = fs;
	:}
;

formal ::= type:t ID:id
	{: RESULT = new Formal(t, id); :}
;

type ::= INT:i {: RESULT = new PrimitiveType(DataTypes.INT); :}
	| BOOLEAN:b {: RESULT = new PrimitiveType(DataTypes.BOOLEAN); :}
	| STRING:s {: RESULT = new PrimitiveType(DataTypes.STRING); :}
	| CLASS_ID:ci {: RESULT = new ClassType(ci); :}
	| type:t LB RB {: t.incrementDimension(); RESULT = t; :}

;