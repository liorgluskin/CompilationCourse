package semantic;

import slp.ArrLocation;
import slp.AssignStmt;
import slp.BinaryOpExpr;
import slp.BlockExpr;
import slp.BlockStmt;
import slp.BreakStmt;
import slp.CallStmt;
import slp.ClassDecl;
import slp.ClassMethod;
import slp.ClassType;
import slp.ContinueStmt;
import slp.Expr;
import slp.Field;
import slp.Formal;
import slp.IDStmt;
import slp.IfStmt;
import slp.Length;
import slp.Literal;
import slp.NewArray;
import slp.NewObject;
import slp.PrimitiveType;
import slp.Program;
import slp.ReturnStmt;
import slp.StaticCall;
import slp.StaticMethod;
import slp.Stmt;
import slp.StmtList;
import slp.This;
import slp.UnaryOpExpr;
import slp.VarLocation;
import slp.VirtualCall;
import slp.Visitor;
import slp.WhileStmt;
import symbolTableHandler.GlobalSymbolTable;
import types.TypeTable;

public class SemanticEvaluator implements Visitor{
	private Boolean hasMain = false;

	
	public SemanticEvaluator(){
		TypeTable.initTypeTable();
	}


	@Override
	public void visit(Program program){
		// create a new global symbol table, to be returned at the end of construction
		GlobalSymbolTable global = new GlobalSymbolTable();

		// add classes to global and updates the type table
		for (ClassDecl c: program.getClasses()){
			try{
				global.addClass(c);
			} catch (SemanticError se){
				// class is previously defined or super class is not defined
				se.setLineNum(c.getLineNum());
				System.err.println(se);
				return null; // run will be killed in the compiler in this case
			}
		}
		
		// recursive class symbol tables build
		for (ICClass c: program.getClasses()){
			// set enclosing scope
			c.setEnclosingScope(global);
			ClassSymbolTable cst = (ClassSymbolTable) c.accept(this);
			if (cst == null) return null; // If anywhere in the recursion an error has been encountered, the run will terminate.
			else {
				if(c.hasSuperClass()){
					global.getClassSymbolTableRec(c.getSuperClassName()).addClassSymbolTable(cst);
				} else {
					global.addClassSymbolTable(cst);
				}
			}
		}
		
		// check if has main method
		if (!hasMain){
			System.err.println(new SemanticError("Program has no main method",0,""));
			return null;
		}
		return global;
	}


	@Override
	public void visit(ClassDecl class_decl) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(ClassMethod method) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(StaticMethod method) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(PrimitiveType primitiveType) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(ClassType classType) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(Field field) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(Formal formal) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(StmtList stmts) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(Stmt stmt) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(AssignStmt stmt) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(CallStmt stmt) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(ReturnStmt stmt) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(IfStmt stmt) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(WhileStmt stmt) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(BreakStmt stmt) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(ContinueStmt stmt) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(BlockStmt stmt) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(IDStmt stmt) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(VarLocation var_loc) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(ArrLocation arr_loc) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(StaticCall static_call) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(VirtualCall virtual_call) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(Literal literal) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(This t) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(NewObject new_obj) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(NewArray new_arr) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(Length length) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(Expr expr) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(BlockExpr expr) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(UnaryOpExpr expr) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void visit(BinaryOpExpr expr) {
		// TODO Auto-generated method stub
		
	}
}
